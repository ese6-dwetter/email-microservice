name: Python push on develop branch

on:
  push:
    branches: [develop]

env:
  PROJECT_NAME: email_microservice
  DOCKER_ORGANIZATION: ese6dwetter
  DOCKER_REPOSITORY: email-microservice
  KUBERNETES_NAMESPACE: dwetter-develop

jobs:
  sonarcloud-scan:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-18.04
    container:
      image: python:3.8-alpine
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Decrypt the GPG encrypted config files
        run: |
          apk add --no-cache gnupg
          gpg --quiet --batch --yes --passphrase \
            ${{ secrets.GPG_PASSPHRASE }} \
            --output ./${{ env.PROJECT_NAME }}/.env \
            --decrypt ./${{ env.PROJECT_NAME }}/develop.env.gpg
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            flake8 \
            pytest \
            pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Build and lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names.
          flake8 . \
            --count \
            --select=E9,F63,F7,F82 \
            --show-source \
            --statistics

          # --exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide.
          flake8 . \
            --count \
            --exit-zero \
            --max-complexity=10 \
            --max-line-length=127 \
            --statistics
      
      - name: Test with pytest and pytest-cov
        run: |
          pytest ${{ env.PROJECT_NAME }}/tests/tests.py \
            --doctest-modules \
            --junitxml=junit/test-results.xml \
            --cov=com \
            --cov-report=xml \
            --cov-report=html

      - name: Upload pytest results artifact
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-artifact
          path: junit/test-results.xml

      - name: Upload project artifact
        uses: actions/upload-artifact@v3
        with:
          name: project-artifact
          path: ./${{ env.PROJECT_NAME }}

      - name: Upload requirements artifact
        uses: actions/upload-artifact@v3
        with:
          name: requirements-artifact
          path: ./requirements.txt

      - name: Upload Dockerfile artifact
        uses: actions/upload-artifact@v3
        with:
          name: dockerfile-artifact
          path: ./Dockerfile

      - name: Upload Kubernetes artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubernetes-artifact
          path: ./kube_develop

  deliver:
    needs: [sonarcloud-scan, build]
    runs-on: ubuntu-18.04
    steps:
      - name: Download project artifact
        uses: actions/download-artifact@v4
        with:
          name: project-artifact
          path: ./${{ env.PROJECT_NAME }}

      - name: Download requirements artifact
        uses: actions/download-artifact@v4
        with:
          name: requirements-artifact
          path: .

      - name: Download Dockerfile artifact
        uses: actions/download-artifact@v4
        with:
          name: dockerfile-artifact
          path: .

      - name: Deliver Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}

  deploy:
    needs: deliver
    runs-on: ubuntu-18.04
    steps:
      - name: Download Kubernetes artifact
        uses: actions/download-artifact@v4
        with:
            name: kubernetes-artifact
            path: ./kube_develop
      
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v1

      - name: Set context via kubeconfig
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy Kubernetes with manifests
        uses: azure/k8s-deploy@v1
        with:
            namespace: ${{ env.KUBERNETES_NAMESPACE }}
            manifests: |
              ./kube_develop/autoscaler.yaml
              ./kube_develop/deployment.yaml
              ./kube_develop/service.yaml
            images: |
              ${{ env.DOCKER_ORGANIZATION }}/${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
